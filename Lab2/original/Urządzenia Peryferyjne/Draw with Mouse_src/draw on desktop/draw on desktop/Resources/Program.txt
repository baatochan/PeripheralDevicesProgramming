using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;
using System.Threading;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;
using Mousemove;

namespace mouse_player
{
    static class Program
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new source());
        }
    }

    public class source : Form
    {
        Drawing draw;

        [DllImport("user32.dll")]
        static extern IntPtr GetDC(IntPtr hWnd);

        public source()
        {
            InitializeComponent();
        }

        private Drawing deserialize(Stream input)
        {
            Drawing temp = null;
            try
            {
                BinaryFormatter formatter = new BinaryFormatter();
                formatter.Binder = new typeconvertor();
                temp = formatter.Deserialize(input) as Drawing;
                input.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }

            return temp;
        }

        private void Draw()
        {
            using (Graphics gr = Graphics.FromHdc(GetDC(IntPtr.Zero)))
            {
                for (int i = 0; i < draw.Curves.Count; i++)
                {
                    Curve temp = draw.Curves[i];
                    Thread.Sleep(temp.Pause);
                    using (Pen p = new Pen(temp.Color, temp.Width))
                    {
                        TimeSpan pause = new TimeSpan(temp.Duration.Ticks / temp.Coordinates.Count);
                        for (int j = 0; j < temp.Coordinates.Count - 1; j++)
                        {
                            gr.DrawLine(p, temp.Coordinates[j], temp.Coordinates[j + 1]);
                            Thread.Sleep(pause);
                        }
                    }
                }
            }
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            Process();
            Application.Exit();
        }

        private void Process()
        {
            Stream temp = Assembly.GetExecutingAssembly().GetManifestResourceStream("points.dat");
            draw = deserialize(temp);
            Draw();
        }

        #region Windows forms Designer Generated code

        private System.ComponentModel.IContainer components = null;
        private void InitializeComponent()
        {
            this.SuspendLayout();
            // 
            // Form1
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(292, 266);
            this.Name = "Form1";
            this.ShowInTaskbar = false;
            this.Text = "Form1";
            this.WindowState = System.Windows.Forms.FormWindowState.Minimized;
            this.Load += new System.EventHandler(this.Form1_Load);
            this.ResumeLayout(false);

        }

        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }
        #endregion
    }

    sealed class typeconvertor : SerializationBinder
    {
        public override Type BindToType(string assemblyName, string typeName)
        {
            Type returntype = null;

            if (assemblyName == "draw on desktop, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null")
            {
                assemblyName = Assembly.GetExecutingAssembly().FullName;

                returntype = Type.GetType(String.Format("{0}, {1}",
                typeName, assemblyName));

                return returntype;
            }

            if (typeName == "System.Collections.Generic.List`1[[Mousemove.Curve, draw on desktop, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]")
            {
                typeName = typeName.Replace("draw on desktop, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", Assembly.GetExecutingAssembly().FullName);

                returntype = Type.GetType(String.Format("{0}, {1}",
                typeName, assemblyName));

                return returntype;
            }

            return returntype;
        }
    }

    
}

namespace Mousemove
{
    [Serializable]
    public class Drawing
    {
        public Drawing()
        {
            curves = new List<Curve>();
        }

        List<Curve> curves;

        public List<Curve> Curves
        {
            get { return curves; }
            set { curves = value; }
        }

    }

    [Serializable]
    public class Curve
    {
        List<Point> coordinates;
        TimeSpan _duration;
        TimeSpan _pause;

        Color col;
        float _width;

        #region Properties

        public TimeSpan Duration
        {
            get { return _duration; }
            set { _duration = value; }
        }

        public TimeSpan Pause
        {
            get { return _pause; }
            set { _pause = value; }
        }

        public float Width
        {
            get { return _width; }
            set { _width = value; }
        }

        public Color Color
        {
            get { return col; }
            set { col = value; }
        }
        #endregion

        public Curve()
        {
            coordinates = new List<Point>();
            _pause = new TimeSpan(0);
        }

        public Curve(TimeSpan dur, TimeSpan pause, Color color, float width)
            : this()
        {
            _duration = dur;
            _pause = pause;

            col = color;
            _width = width;
        }

        public List<Point> Coordinates
        {
            get { return coordinates; }
            set { coordinates = value; }
        }

    }
}